╔═══════════════════════════════════════════════════════════════════════════════╗
║                   BrandMind AI - Workflow Builder Architecture                ║
╚═══════════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────────┐
│                              USER INTERFACE                                  │
└─────────────────────────────────────────────────────────────────────────────┘

    ┌────────────────────────────────────────────────────────────┐
    │                        App.jsx                              │
    │  ┌──────────────────────────────────────────────────────┐  │
    │  │  Mode Toggle: [Quick Mode ⚡] [Workflow Builder 🔄] │  │
    │  └──────────────────────────────────────────────────────┘  │
    └─────────┬───────────────────────────────────────┬──────────┘
              │                                        │
    ┌─────────▼────────────┐              ┌──────────▼────────────────┐
    │   Quick Mode         │              │  Workflow Builder         │
    │   (Original)         │              │  (New Feature)            │
    └──────────────────────┘              └───────────────────────────┘
    │                                      │
    │ • BriefInput.jsx                    │ ┌──────────────────────────┐
    │ • CampaignCanvas.jsx                │ │  WorkflowNavbar.jsx      │
    │ • AssetCard.jsx                     │ │  [Save] [Run] [Export]   │
    │ • ExportButton.jsx                  │ └──────────────────────────┘
    │                                      │
    │                                      │ ┌─────┬────────────────────┐
    │                                      │ │ S   │   ReactFlow        │
    │                                      │ │ i   │   Canvas           │
    │                                      │ │ d   │                    │
    │                                      │ │ e   │  ┌──────────┐     │
    │                                      │ │ b   │  │ AgentNode│     │
    │                                      │ │ a   │  │  🎯      │     │
    │                                      │ │ r   │  └─────┬────┘     │
    │                                      │ │     │        │          │
    │                                      │ │ 🎯  │        ▼          │
    │                                      │ │ ✍️  │  ┌──────────┐     │
    │                                      │ │ 🎨  │  │ AgentNode│     │
    │                                      │ │ 🔍  │  │  ✍️      │     │
    │                                      │ │ 📊  │  └──────────┘     │
    │                                      │ └─────┴────────────────────┘
    └──────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                           STATE MANAGEMENT                                   │
└─────────────────────────────────────────────────────────────────────────────┘

    ┌────────────────────────────────────────────────────────────┐
    │                   workflowStore.js (Zustand)                │
    │  ┌──────────────────────────────────────────────────────┐  │
    │  │  State:                                               │  │
    │  │    • nodes: []           - Array of agent nodes      │  │
    │  │    • edges: []           - Array of connections      │  │
    │  │    • workflowName: ""    - Workflow title            │  │
    │  │                                                       │  │
    │  │  Actions:                                             │  │
    │  │    • addNode()           - Add new agent             │  │
    │  │    • updateNode()        - Update agent data         │  │
    │  │    • removeNode()        - Delete agent              │  │
    │  │    • onConnect()         - Create edge               │  │
    │  │    • saveWorkflow()      - Save to localStorage      │  │
    │  │    • loadWorkflow()      - Load from localStorage    │  │
    │  │    • getExecutionOrder() - Topological sort          │  │
    │  └──────────────────────────────────────────────────────┘  │
    └────────────────────────────────────────────────────────────┘
                                    │
                                    ▼
    ┌────────────────────────────────────────────────────────────┐
    │                   localStorage                              │
    │  Key: "brandmind_workflow"                                 │
    │  Value: { name, nodes, edges, savedAt }                    │
    └────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                           AGENT EXECUTION                                    │
└─────────────────────────────────────────────────────────────────────────────┘

    ┌────────────────────────────────────────────────────────────┐
    │                    agentAPI.js                              │
    │  ┌──────────────────────────────────────────────────────┐  │
    │  │  runAgent(agentType, input)                          │  │
    │  │    ├─ strategy    → Campaign strategy               │  │
    │  │    ├─ copywriting → Marketing copy                  │  │
    │  │    ├─ visual      → Image concepts                  │  │
    │  │    ├─ research    → Market research                 │  │
    │  │    └─ media       → Media planning                  │  │
    │  └──────────────────────────────────────────────────────┘  │
    └─────────┬──────────────────────────────────────┬───────────┘
              │                                       │
    ┌─────────▼──────────┐              ┌───────────▼────────────┐
    │   Mock Mode        │              │   Real Backend         │
    │   (Current)        │              │   (Future)             │
    │                    │              │                        │
    │ • Fake responses   │              │ • POST /api/agent/run │
    │ • 1-2s delay       │              │ • Real AI execution   │
    │ • Pre-defined JSON │              │ • FastAPI endpoints   │
    └────────────────────┘              └────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────┐
│                         EXECUTION FLOW                                       │
└─────────────────────────────────────────────────────────────────────────────┘

    Individual Agent Run:
    ═══════════════════════════════════════════════════════════════════
    
    User clicks "Run Agent"
            │
            ▼
    Update status: "running"
            │
            ▼
    Call agent.onRun(input)
            │
            ▼
    agentAPI.runAgent(type, input)
            │
            ├─ Mock: Return fake data after delay
            └─ Real: HTTP POST to backend
            │
            ▼
    Update status: "success"
    Display output in node


    Full Workflow Run:
    ═══════════════════════════════════════════════════════════════════
    
    User clicks "Run Workflow"
            │
            ▼
    getExecutionOrder()
    (Topological sort based on connections)
            │
            ▼
    For each node in order:
      │
      ├─ Get input from connected nodes
      ├─ Combine with node's own input
      ├─ Execute agent
      ├─ Wait for completion
      └─ Pass output to next node
            │
            ▼
    All nodes complete
    Show success message

┌─────────────────────────────────────────────────────────────────────────────┐
│                           DATA FLOW                                          │
└─────────────────────────────────────────────────────────────────────────────┘

    Node Data Structure:
    ═══════════════════════════════════════════════════════════════════
    
    {
      id: "node_0",
      type: "agentNode",
      position: { x: 100, y: 200 },
      data: {
        label: "Strategy Agent",
        agentType: "strategy",
        status: "idle" | "running" | "success" | "error",
        input: "User's instructions...",
        output: { /* Agent's response */ },
        showInput: true,
        onRun: async (input) => { /* Execution function */ }
      }
    }

    Edge Data Structure:
    ═══════════════════════════════════════════════════════════════════
    
    {
      id: "edge_0",
      source: "node_0",
      target: "node_1",
      animated: true,
      style: { stroke: "#5B9DFE" }
    }

┌─────────────────────────────────────────────────────────────────────────────┐
│                         COMPONENT TREE                                       │
└─────────────────────────────────────────────────────────────────────────────┘

    WorkflowBuilder
    ├── ReactFlowProvider
    │   └── WorkflowBuilderInner
    │       ├── WorkflowNavbar
    │       │   ├── Save Button
    │       │   ├── Load Button
    │       │   ├── Export Button
    │       │   ├── Clear Button
    │       │   └── Run Workflow Button
    │       ├── Sidebar
    │       │   ├── Agent Block (Strategy)
    │       │   ├── Agent Block (Copywriting)
    │       │   ├── Agent Block (Visual)
    │       │   ├── Agent Block (Research)
    │       │   └── Agent Block (Media)
    │       └── ReactFlow
    │           ├── Background
    │           ├── Controls (zoom, pan)
    │           ├── MiniMap
    │           └── AgentNode (repeated for each node)
    │               ├── Handle (input)
    │               ├── Title + Icon
    │               ├── Status Indicator
    │               ├── Input TextArea
    │               ├── Run Button
    │               ├── Output Display
    │               ├── Delete Button
    │               └── Handle (output)

┌─────────────────────────────────────────────────────────────────────────────┐
│                      FILE DEPENDENCIES                                       │
└─────────────────────────────────────────────────────────────────────────────┘

    App.jsx
     ├─ imports BriefInput.jsx
     ├─ imports CampaignCanvas.jsx
     └─ imports WorkflowBuilder.jsx
         └─ imports
             ├─ ReactFlow (from 'reactflow')
             ├─ workflowStore.js
             ├─ AgentNode.jsx
             ├─ Sidebar.jsx
             ├─ WorkflowNavbar.jsx
             └─ agentAPI.js
                 └─ imports axios

    Styling:
     ├─ index.css (Global Tailwind)
     └─ workflow.css (React Flow custom)

┌─────────────────────────────────────────────────────────────────────────────┐
│                         COLOR SCHEME                                         │
└─────────────────────────────────────────────────────────────────────────────┘

    Brand Colors:
    ════════════════════════════════════════════════════════════════
    Primary:    #5B9DFE  (Electric Blue)
    Accent:     #1E1E2E  (Dark Slate)
    Text:       #E2E8F0  (Light Gray)

    Agent Colors:
    ════════════════════════════════════════════════════════════════
    Strategy:    #4ADE80  (Green)   🎯
    Copywriting: #60A5FA  (Blue)    ✍️
    Visual:      #FB923C  (Orange)  🎨
    Research:    #A78BFA  (Purple)  🔍
    Media:       #F472B6  (Pink)    📊

    UI States:
    ════════════════════════════════════════════════════════════════
    Idle:        #64748B  (Slate)
    Running:     #3B82F6  (Blue) + pulse animation
    Success:     #10B981  (Green)
    Error:       #EF4444  (Red)

┌─────────────────────────────────────────────────────────────────────────────┐
│                      INTEGRATION POINTS                                      │
└─────────────────────────────────────────────────────────────────────────────┘

    Frontend ←→ Backend:
    ════════════════════════════════════════════════════════════════
    
    Current (Mock):
    ├─ agentAPI.js returns fake data
    └─ No actual HTTP calls
    
    Future (Real):
    ├─ POST /api/agent/run
    │   Body: { agent_type, input }
    │   Response: { success, result }
    │
    ├─ POST /api/workflow/run
    │   Body: { nodes, edges }
    │   Response: { success, results[] }
    │
    └─ POST /api/workflow/save
        Body: { name, nodes, edges }
        Response: { success, workflow_id }

═══════════════════════════════════════════════════════════════════════════════
                              END OF DIAGRAM
═══════════════════════════════════════════════════════════════════════════════

